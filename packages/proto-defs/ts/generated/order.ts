// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: order.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "order";

export enum Side {
  SIDE_UNSPECIFIED = 0,
  BUY = 1,
  SELL = 2,
  UNRECOGNIZED = -1,
}

export function sideFromJSON(object: any): Side {
  switch (object) {
    case 0:
    case "SIDE_UNSPECIFIED":
      return Side.SIDE_UNSPECIFIED;
    case 1:
    case "BUY":
      return Side.BUY;
    case 2:
    case "SELL":
      return Side.SELL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Side.UNRECOGNIZED;
  }
}

export function sideToJSON(object: Side): string {
  switch (object) {
    case Side.SIDE_UNSPECIFIED:
      return "SIDE_UNSPECIFIED";
    case Side.BUY:
      return "BUY";
    case Side.SELL:
      return "SELL";
    case Side.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Order {
  id: string;
  symbol: string;
  price: number;
  volume: number;
  side: Side;
  userId: string;
  clientTimestamp: Date | undefined;
  engineTimestamp: Date | undefined;
}

export interface CreateOrderRequest {
  symbol: string;
  price: number;
  volume: number;
  side: Side;
  userId: string;
  clientTimestamp: Date | undefined;
}

export interface CreateOrderResponse {
  id: string;
}

export interface OrderIdRequest {
  id: string;
}

function createBaseOrder(): Order {
  return {
    id: "",
    symbol: "",
    price: 0,
    volume: 0,
    side: 0,
    userId: "",
    clientTimestamp: undefined,
    engineTimestamp: undefined,
  };
}

export const Order: MessageFns<Order> = {
  encode(message: Order, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.symbol !== "") {
      writer.uint32(18).string(message.symbol);
    }
    if (message.price !== 0) {
      writer.uint32(25).double(message.price);
    }
    if (message.volume !== 0) {
      writer.uint32(32).uint32(message.volume);
    }
    if (message.side !== 0) {
      writer.uint32(40).int32(message.side);
    }
    if (message.userId !== "") {
      writer.uint32(50).string(message.userId);
    }
    if (message.clientTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.clientTimestamp), writer.uint32(58).fork()).join();
    }
    if (message.engineTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.engineTimestamp), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Order {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.volume = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.side = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.clientTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.engineTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Order {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      volume: isSet(object.volume) ? globalThis.Number(object.volume) : 0,
      side: isSet(object.side) ? sideFromJSON(object.side) : 0,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      clientTimestamp: isSet(object.clientTimestamp) ? fromJsonTimestamp(object.clientTimestamp) : undefined,
      engineTimestamp: isSet(object.engineTimestamp) ? fromJsonTimestamp(object.engineTimestamp) : undefined,
    };
  },

  toJSON(message: Order): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.volume !== 0) {
      obj.volume = Math.round(message.volume);
    }
    if (message.side !== 0) {
      obj.side = sideToJSON(message.side);
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.clientTimestamp !== undefined) {
      obj.clientTimestamp = message.clientTimestamp.toISOString();
    }
    if (message.engineTimestamp !== undefined) {
      obj.engineTimestamp = message.engineTimestamp.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Order>, I>>(base?: I): Order {
    return Order.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Order>, I>>(object: I): Order {
    const message = createBaseOrder();
    message.id = object.id ?? "";
    message.symbol = object.symbol ?? "";
    message.price = object.price ?? 0;
    message.volume = object.volume ?? 0;
    message.side = object.side ?? 0;
    message.userId = object.userId ?? "";
    message.clientTimestamp = object.clientTimestamp ?? undefined;
    message.engineTimestamp = object.engineTimestamp ?? undefined;
    return message;
  },
};

function createBaseCreateOrderRequest(): CreateOrderRequest {
  return { symbol: "", price: 0, volume: 0, side: 0, userId: "", clientTimestamp: undefined };
}

export const CreateOrderRequest: MessageFns<CreateOrderRequest> = {
  encode(message: CreateOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.symbol !== "") {
      writer.uint32(10).string(message.symbol);
    }
    if (message.price !== 0) {
      writer.uint32(17).double(message.price);
    }
    if (message.volume !== 0) {
      writer.uint32(24).uint32(message.volume);
    }
    if (message.side !== 0) {
      writer.uint32(32).int32(message.side);
    }
    if (message.userId !== "") {
      writer.uint32(42).string(message.userId);
    }
    if (message.clientTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.clientTimestamp), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.volume = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.side = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.clientTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderRequest {
    return {
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      volume: isSet(object.volume) ? globalThis.Number(object.volume) : 0,
      side: isSet(object.side) ? sideFromJSON(object.side) : 0,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      clientTimestamp: isSet(object.clientTimestamp) ? fromJsonTimestamp(object.clientTimestamp) : undefined,
    };
  },

  toJSON(message: CreateOrderRequest): unknown {
    const obj: any = {};
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.volume !== 0) {
      obj.volume = Math.round(message.volume);
    }
    if (message.side !== 0) {
      obj.side = sideToJSON(message.side);
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.clientTimestamp !== undefined) {
      obj.clientTimestamp = message.clientTimestamp.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(base?: I): CreateOrderRequest {
    return CreateOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(object: I): CreateOrderRequest {
    const message = createBaseCreateOrderRequest();
    message.symbol = object.symbol ?? "";
    message.price = object.price ?? 0;
    message.volume = object.volume ?? 0;
    message.side = object.side ?? 0;
    message.userId = object.userId ?? "";
    message.clientTimestamp = object.clientTimestamp ?? undefined;
    return message;
  },
};

function createBaseCreateOrderResponse(): CreateOrderResponse {
  return { id: "" };
}

export const CreateOrderResponse: MessageFns<CreateOrderResponse> = {
  encode(message: CreateOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: CreateOrderResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderResponse>, I>>(base?: I): CreateOrderResponse {
    return CreateOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderResponse>, I>>(object: I): CreateOrderResponse {
    const message = createBaseCreateOrderResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseOrderIdRequest(): OrderIdRequest {
  return { id: "" };
}

export const OrderIdRequest: MessageFns<OrderIdRequest> = {
  encode(message: OrderIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: OrderIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderIdRequest>, I>>(base?: I): OrderIdRequest {
    return OrderIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderIdRequest>, I>>(object: I): OrderIdRequest {
    const message = createBaseOrderIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

export interface OrderService {
  CreateOrder(request: CreateOrderRequest): Promise<CreateOrderResponse>;
  GetOrderById(request: OrderIdRequest): Promise<Order>;
}

export const OrderServiceServiceName = "order.OrderService";
export class OrderServiceClientImpl implements OrderService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || OrderServiceServiceName;
    this.rpc = rpc;
    this.CreateOrder = this.CreateOrder.bind(this);
    this.GetOrderById = this.GetOrderById.bind(this);
  }
  CreateOrder(request: CreateOrderRequest): Promise<CreateOrderResponse> {
    const data = CreateOrderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateOrder", data);
    return promise.then((data) => CreateOrderResponse.decode(new BinaryReader(data)));
  }

  GetOrderById(request: OrderIdRequest): Promise<Order> {
    const data = OrderIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOrderById", data);
    return promise.then((data) => Order.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
